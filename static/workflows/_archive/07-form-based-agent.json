{
  "name": "Multimodal PDF Agent with Form",
  "nodes": [
    {
      "parameters": {
        "path": "upload-pdf",
        "formTitle": "ðŸ“„ Upload PDF to Multimodal Agent",
        "formDescription": "Upload a PDF document to process with Voyage AI multimodal embeddings and MongoDB Vector Search",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Upload Your PDF",
              "fieldType": "file",
              "requiredField": true,
              "acceptFileTypes": ".pdf",
              "multipleFiles": false
            },
            {
              "fieldLabel": "Document Description (Optional)",
              "fieldType": "text",
              "placeholder": "Brief description of your document"
            }
          ]
        },
        "responseMode": "formPage",
        "formResponseMessage": "âœ… PDF uploaded successfully! Your document is being processed...",
        "options": {
          "formSubmitButtonLabel": "Upload PDF"
        }
      },
      "id": "form-trigger",
      "name": "PDF Upload Form",
      "type": "@n8n/n8n-nodes-langchain.formTrigger",
      "typeVersion": 2.1,
      "position": [240, 300],
      "webhookId": "pdf-form-trigger"
    },
    {
      "parameters": {
        "jsCode": "// Extract PDF file from form submission\nconst formData = $json;\nconst file = $binary.file;\n\nif (!file) {\n  throw new Error('No file uploaded');\n}\n\nconst filename = file.fileName || 'document.pdf';\nif (!filename.toLowerCase().endsWith('.pdf')) {\n  throw new Error('Only PDF files are supported');\n}\n\nconst description = formData.description || '';\n\n// Simulate PDF text extraction (in production use pdf-parse)\nconst mockPages = [\n  {\n    pageNumber: 1,\n    text: \"Introduction to Multimodal AI Systems. This revolutionary approach allows AI to process both textual and visual information simultaneously.\",\n    hasImages: true\n  },\n  {\n    pageNumber: 2,\n    text: \"Voyage AI's multimodal embeddings represent a breakthrough in unified vector representations for text and images in 1024 dimensions.\",\n    hasImages: false\n  },\n  {\n    pageNumber: 3,\n    text: \"Applications include document understanding, visual question answering, and cross-modal search capabilities.\",\n    hasImages: true\n  }\n];\n\nreturn mockPages.map(page => ({\n  json: {\n    filename: filename,\n    description: description,\n    pageNumber: page.pageNumber,\n    textContent: page.text,\n    hasImages: page.hasImages,\n    uploadedAt: new Date().toISOString(),\n    formSubmissionId: $executionId\n  },\n  binary: { file: file }\n}));"
      },
      "id": "extract-pdf",
      "name": "Extract PDF Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "https://workshop-embedding-api.vercel.app/api/embed",
        "sendQuery": false,
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": {{ JSON.stringify($json.textContent) }},\n  \"model\": \"voyage-3\"\n}",
        "options": {}
      },
      "id": "voyage-embed",
      "name": "Generate Embeddings",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "pdf_documents",
        "fields": "={\n  \"filename\": {{ JSON.stringify($('Extract PDF Content').item.json.filename) }},\n  \"description\": {{ JSON.stringify($('Extract PDF Content').item.json.description) }},\n  \"pageNumber\": {{ $('Extract PDF Content').item.json.pageNumber }},\n  \"textContent\": {{ JSON.stringify($('Extract PDF Content').item.json.textContent) }},\n  \"embedding\": {{ JSON.stringify($json.embeddings[0]) }},\n  \"metadata\": {\n    \"uploadedAt\": {{ JSON.stringify($('Extract PDF Content').item.json.uploadedAt) }},\n    \"model\": {{ JSON.stringify($json.model) }},\n    \"dimensions\": 1024,\n    \"hasImages\": {{ $('Extract PDF Content').item.json.hasImages }},\n    \"formSubmissionId\": {{ JSON.stringify($('Extract PDF Content').item.json.formSubmissionId) }}\n  }\n}"
      },
      "id": "mongodb-store",
      "name": "Store in MongoDB",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [900, 300],
      "credentials": {
        "mongoDb": {
          "id": "mongodb-local",
          "name": "MongoDB Local"
        }
      }
    },
    {
      "parameters": {
        "path": "ask-question",
        "formTitle": "ðŸ¤– Ask About Your PDFs",
        "formDescription": "Ask questions about the documents you've uploaded",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Your Question",
              "fieldType": "text",
              "requiredField": true,
              "placeholder": "What would you like to know about your documents?"
            },
            {
              "fieldLabel": "Search Specific File (Optional)",
              "fieldType": "text",
              "placeholder": "Leave empty to search all documents"
            }
          ]
        },
        "responseMode": "responseNode",
        "options": {
          "formSubmitButtonLabel": "Ask Question"
        }
      },
      "id": "form-ask",
      "name": "Q&A Form",
      "type": "@n8n/n8n-nodes-langchain.formTrigger",
      "typeVersion": 2.1,
      "position": [240, 600],
      "webhookId": "qa-form-trigger"
    },
    {
      "parameters": {
        "url": "https://workshop-embedding-api.vercel.app/api/embed",
        "sendQuery": false,
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": {{ JSON.stringify($json.question) }},\n  \"model\": \"voyage-3\"\n}",
        "options": {}
      },
      "id": "embed-question",
      "name": "Embed Question",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 600]
    },
    {
      "parameters": {
        "operation": "aggregate",
        "collection": "pdf_documents",
        "query": "=[\n  {\n    \"$vectorSearch\": {\n      \"index\": \"vector_index\",\n      \"path\": \"embedding\",\n      \"queryVector\": {{ JSON.stringify($json.embeddings[0]) }},\n      \"numCandidates\": 100,\n      \"limit\": 5,\n      \"filter\": {{ $('Q&A Form').item.json.filename ? JSON.stringify({ filename: $('Q&A Form').item.json.filename }) : '{}' }}\n    }\n  },\n  {\n    \"$project\": {\n      \"_id\": 1,\n      \"filename\": 1,\n      \"pageNumber\": 1,\n      \"textContent\": 1,\n      \"description\": 1,\n      \"score\": { \"$meta\": \"vectorSearchScore\" }\n    }\n  }\n]"
      },
      "id": "vector-search",
      "name": "Vector Search",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [680, 600],
      "credentials": {
        "mongoDb": {
          "id": "mongodb-local",
          "name": "MongoDB Local"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Build AI prompt with context\nconst question = $('Q&A Form').item.json.question;\nconst searchResults = $input.all();\n\nif (!searchResults.length) {\n  return [{\n    json: {\n      answer: \"I couldn't find any relevant information in the uploaded documents. Please make sure you've uploaded PDFs first.\",\n      sources: []\n    }\n  }];\n}\n\n// Build context from search results\nconst context = searchResults\n  .map((item, idx) => \n    `[Source ${idx + 1} - ${item.json.filename}, Page ${item.json.pageNumber}]\\n${item.json.textContent}`\n  )\n  .join('\\n\\n');\n\n// For workshop - simulate AI response\n// In production, call OpenAI/Gemini here\nconst mockResponse = `Based on the documents you've uploaded, here's what I found regarding \"${question}\":\\n\\n`;\n\nconst answer = mockResponse + \n  `The documents discuss ${question.toLowerCase().includes('ai') ? 'artificial intelligence and multimodal systems' : 'the topic you asked about'}. ` +\n  `Specifically, I found relevant information in ${searchResults[0].json.filename} (page ${searchResults[0].json.pageNumber}) ` +\n  `that mentions: \"${searchResults[0].json.textContent.substring(0, 150)}...\"\\n\\n` +\n  `This information comes from ${searchResults.length} relevant sections across your uploaded PDFs.`;\n\nreturn [{\n  json: {\n    answer: answer,\n    sources: searchResults.map(r => ({\n      filename: r.json.filename,\n      page: r.json.pageNumber,\n      relevance: r.json.score\n    })),\n    question: question,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "generate-answer",
      "name": "Generate Answer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 600]
    },
    {
      "parameters": {
        "html": "=<div style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;\">\n  <div style=\"background: #f8f9fa; border-radius: 8px; padding: 20px; margin-bottom: 20px;\">\n    <h2 style=\"color: #1a73e8; margin-top: 0;\">ðŸ¤– Your Answer</h2>\n    <p style=\"color: #5f6368; white-space: pre-wrap;\">{{ $json.answer }}</p>\n  </div>\n  \n  <div style=\"background: #e8f0fe; border-radius: 8px; padding: 20px;\">\n    <h3 style=\"color: #1967d2; margin-top: 0;\">ðŸ“š Sources</h3>\n    <ul style=\"list-style: none; padding: 0;\">\n      {{ $json.sources.map(s => `<li style=\"margin-bottom: 10px;\">â€¢ <strong>${s.filename}</strong> - Page ${s.page} (Relevance: ${(s.relevance * 100).toFixed(1)}%)</li>`).join('') }}\n    </ul>\n  </div>\n  \n  <div style=\"margin-top: 20px; text-align: center;\">\n    <a href=\"/webhook/ask-question\" style=\"background: #1a73e8; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; display: inline-block;\">Ask Another Question</a>\n  </div>\n</div>"
      },
      "id": "respond-with-html",
      "name": "Format Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1120, 600]
    },
    {
      "parameters": {
        "content": "## ðŸŽ¯ Complete Multimodal PDF Agent with Forms\n\n### Two User-Friendly Forms:\n\n1. **PDF Upload Form** (`/webhook/upload-pdf`)\n   - Drag & drop PDF upload\n   - Optional description field\n   - Processes with Voyage AI\n\n2. **Q&A Form** (`/webhook/ask-question`)\n   - Natural language questions\n   - Optional filename filter\n   - Beautiful formatted responses\n\n### Features:\n- No coding required for users\n- Works perfectly in Codespaces\n- Mobile-friendly forms\n- Vector search with MongoDB\n- Source citations included",
        "height": 280,
        "width": 400
      },
      "id": "workflow-info",
      "name": "Workflow Info",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [620, 50]
    }
  ],
  "pinData": {},
  "connections": {
    "PDF Upload Form": {
      "main": [
        [
          {
            "node": "Extract PDF Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Content": {
      "main": [
        [
          {
            "node": "Generate Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Embeddings": {
      "main": [
        [
          {
            "node": "Store in MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Q&A Form": {
      "main": [
        [
          {
            "node": "Embed Question",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embed Question": {
      "main": [
        [
          {
            "node": "Vector Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vector Search": {
      "main": [
        [
          {
            "node": "Generate Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Answer": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "form-based-v1",
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "id": "multimodal-pdf-agent-forms",
  "tags": ["workshop", "forms", "user-friendly", "multimodal"]
}